@startuml CheckHandler

class CheckHandler {
  - boardCopy: IBoard
  - originalBoard: IBoard
  - helper: BoardHelper
  - color: PieceColor
  - defenders: Map<Field, IPiece>

  + CheckHandler(board: IBoard, color: PieceColor)
  + isCheck(): boolean
  + isMate(): boolean
  + isDraw(moveList: List<Move>): boolean
  + isStalemate(): boolean
  + isInsufficientMaterial(): boolean
  + getColor(): PieceColor

  - generateOptions(): List<Move>
  - generateMovesForFieldSet(set: FieldSet, startField: Field, piece: IPiece): List<Move>
  - testMoves(): boolean
  - colorHasSufficientMaterial(color: PieceColor): boolean
  - getIndexOfLastMoveOfColor(currentColor: PieceColor, moveList: List<Move>): int
  - isThreeFoldColor(moveList: List<Move>, currentColor: PieceColor): boolean
  - isThreeFold(moveList: List<Move>): boolean
  - fiftyMoveRule(moveList: List<Move>): boolean
}

class Game{
    testMove()
    handleMove()
}
Game --> CheckHandler

@enduml