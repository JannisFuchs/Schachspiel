@startuml CheckHandler

class CheckHandler {
  - boardCopy: IBoard
  - originalBoard: IBoard
  - helper: BoardHelper
  - color: PieceColor
  - defenders: Map<Field, IPiece>

  + CheckHandler(board: IBoard, color: PieceColor)
  + isCheck(): boolean
  + isMate(): boolean
  + isDraw(moveList: List<Move>): boolean
  + isStalemate(): boolean
  + isInsufficientMaterial(): boolean
  + getColor(): PieceColor

  - generateOptions(): List<Move>
  - generateMovesForFieldSet(set: FieldSet, startField: Field, piece: IPiece): List<Move>
  - testMoves(): boolean
  - colorHasSufficientMaterial(color: PieceColor): boolean
  - getIndexOfLastMoveOfColor(currentColor: PieceColor, moveList: List<Move>): int
  - isThreeFoldColor(moveList: List<Move>, currentColor: PieceColor): boolean
  - isThreeFold(moveList: List<Move>): boolean
  - fiftyMoveRule(moveList: List<Move>): boolean
}

interface IBoard {
  + copy(): IBoard
  + makeMove(move: Move)
  + getKingField(color: PieceColor): Field
}

class BoardHelper {
  + getAttacker(field: Field, color: PieceColor): Set<Field>
  + getAllPiecesFromColor(color: PieceColor): Map<Field, IPiece>
}

enum PieceColor {
  WHITE
  BLACK
  + getOtherColor(): PieceColor
}

class Move {
  + piece: IPiece
  + isCapture: boolean
}

class Field {
  + isOccupiedByColor(color: PieceColor, board: IBoard): boolean
}

interface IPiece {
  + getColor(): PieceColor
  + getPieceType(): PieceType
  + getCandidateFields(field: Field, board: IBoard): FieldSet
}

CheckHandler --> IBoard
CheckHandler --> BoardHelper
CheckHandler --> PieceColor
CheckHandler --> Move
CheckHandler --> Field
CheckHandler --> IPiece

Move --> IPiece
Field --> IPiece
BoardHelper --> IBoard

@enduml