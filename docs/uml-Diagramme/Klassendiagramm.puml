@startuml

package interfaces{
    interface IPlayer {
    ~ Move readMove(Scanner)
    ~ PieceColor getColor()
    }
    interface ILogger {
    ~ void log(String)
    }

    interface IPiece {
    ~ char getSymbol()
    ~ PieceColor getColor()
    ~ PieceType getPieceType()
    ~ FieldSet getCandidateFields(Field,IBoard)
    ~ Field calculateStartField(FieldSet,Move,IBoard)
    ~ boolean isAbleToAttack(Field,Field,PieceColor,IBoard)
    }
    interface IBoard {
    ~ IPiece getPiece(Field)
    ~ int getRowLength()
    ~ int getColumnLength()
    ~ void makeMove(Move)
    ~ FieldSet getFieldsWithPiece(PieceType,PieceColor)
    ~ Field getKingField(PieceColor)
    ~ IBoard copy()
    }
}
package pieces{

    class None {
    - PieceColor c
    + <<Create>> None(PieceColor)
    + char getSymbol()
    + PieceColor getColor()
    + PieceType getPieceType()
    + FieldSet getCandidateFields(Field,IBoard)
    + Field calculateStartField(FieldSet,Move,IBoard)
    + boolean isAbleToAttack(Field,Field,PieceColor,IBoard)
    + PieceColor c()
    }


    class PieceFactory {
    - <<Create>> PieceFactory()
    + {static} IPiece[][] createBoardFromFEN(String)
    - {static} void mergePieceArrayIntoArray(IPiece[],IPiece[])
    ~ {static} IPiece[] generatePiecesFromChar(char)
    + {static} IPiece createPieceFromType(PieceType,PieceColor)
    }
    class Pawn {
    - PieceColor c
    + <<Create>> Pawn(PieceColor)
    + char getSymbol()
    + PieceColor getColor()
    + PieceType getPieceType()
    + FieldSet getCandidateFields(Field,IBoard)
    + Field calculateStartField(FieldSet,Move,IBoard)
    + boolean isAbleToAttack(Field,Field,PieceColor,IBoard)
    - FieldSet filterBehindSquares(FieldSet,Field,PieceColor)
    - Field calculateCapture(Move,IBoard,FieldSet)
    - Field calculateNormalMove(Move,IBoard,FieldSet)
    - Field validateMove(Field,Move,IBoard)
    + PieceColor c()
    }

    class King {
    - PieceColor c
    + <<Create>> King(PieceColor)
    + char getSymbol()
    + PieceColor getColor()
    + PieceType getPieceType()
    + FieldSet getCandidateFields(Field,IBoard)
    + Field calculateStartField(FieldSet,Move,IBoard)
    + boolean isAbleToAttack(Field,Field,PieceColor,IBoard)
    + PieceColor c()
    }

}
enum PieceType {
+  PAWN
+  KNIGHT
+  ROOK
+  BISHOP
+  QUEEN
+  KING
+  NONE
+ {static} PieceType pieceTypeFromChar(char)
}
enum PieceColor {
+  BLACK
+  WHITE
+ PieceColor getOtherColor()

}
IPiece --* PieceType
IPiece --* PieceColor

Pawn --|> IPiece
King --|> IPiece
None --|> IPiece

PieceFactory --> IPiece : creates

package logger{
    class ErrorLogger {
    + void log(String)
    }
    enum LogType {
    +  GAME
    +  INFO
    +  ERROR
    +  TEST
    }
    enum FileLogger {
    +  INSTANCE
    ~ File logFile
    ~ <<Create>> FileLogger()
    + void writeToFile(String)
    }

    class GameLogger {
    + void log(String)
    }
    class LogHandler {
    - ILogger gameLogger
    - ILogger errorLogger
    - ILogger infoLogger
    - ILogger testLogger
    + boolean isTestEnabled
    + <<Create>> LogHandler(boolean)
    + void log(String,LogType)
    }
}
ILogger <|.. ErrorLogger
ErrorLogger --> FileLogger : writes to
ILogger <|.. GameLogger
LogHandler --> ErrorLogger : uses
LogHandler --> GameLogger : uses



class Player {
- PieceColor pieceColor
- LogHandler logger
+ <<Create>> Player(PieceColor,LogHandler)
+ Move readMove(Scanner)
+ PieceColor getColor()
}





class Color {
- int red
- int green
- int blue
- boolean isBackground
+ <<Create>> Color(int,int,int,boolean)
+ String toString()
+ int red()
+ boolean isBackground()
+ int green()
+ int blue()
}





class Visualisation {
- Map<PieceColor,Color> pieceColorMap
- Map<BoardColor,Color> boardColorColorMap
- LogHandler logger
- Field inCheck
+ <<Create>> Visualisation(LogHandler,Color,Color,Color,Color,Color)
+ void drawBoard(IBoard)
- BoardColor getBoardColor(Field)
+ void setCheck(Field)
- void resetCheck()
}


class Board {
- IPiece[][] pieceArray
+ <<Create>> Board(IPiece[][])
+ Field getKingField(PieceColor)
+ IPiece getPiece(Field)
+ int getRowLength()
+ int getColumnLength()
- void checksField(Move)
+ void makeMove(Move)
- Field prepareMove(Move)
+ FieldSet getFieldsWithPiece(PieceType,PieceColor)
+ FieldSet selectFields(Move)
+ boolean equals(Object)
+ Board copy()
}






class App {
~ <<Create>> App(String[])
+ {static} void main(String[])
}



class CheckHandler {
- IBoard boardCopy
- IBoard originalBoard
- BoardHelper helper
- PieceColor color
- Map<Field,IPiece> defenders
+ <<Create>> CheckHandler(IBoard,PieceColor)
- List<Move> generateOptions()
- List<Move> generateMovesForFieldSet(FieldSet,Field,IPiece)
+ boolean isCheck()
+ boolean isMate()
- boolean testMoves()
- boolean colorHasSufficientMaterial(PieceColor)
+ boolean isInsufficientMaterial()
- int getIndexOfLastMoveOfColor(PieceColor,List<Move>)
- boolean isThreeFoldColor(List<Move>,PieceColor)
+ boolean isThreeFold(List<Move>)
+ boolean fiftyMoveRule(List<Move>)
+ boolean isDraw(List<Move>)
+ boolean isStalemate()
+ PieceColor getColor()
}


class Field {
- int row
- int column
+ <<Create>> Field(int,int)
+ boolean isReachableByDiagonal(Field,IBoard)
+ boolean isReachableByRow(Field,IBoard)
+ boolean isReachableByColumn(Field,IBoard)
+ boolean isOccupiedByColor(PieceColor,IBoard)
+ FieldSet getFieldsInBetween(Field)
- FieldSet getFieldsInBetweenRow(Field)
- FieldSet getFieldsInBetweenColumn(Field)
- FieldSet getFieldsInBetweenDiagonal(Field)
+ boolean isValid()
+ int row()
+ int column()
}



class Move {
+ Field start
+ Field target
+ IPiece piece
+ boolean isCheck
+ boolean isMate
+ boolean isCapture
+ IPiece promotedPiece
+ <<Create>> Move(Field,Field,IPiece,boolean,boolean,boolean,IPiece)
+ <<Create>> Move(Field,Field,IPiece,boolean)
+ <<Create>> Move(String,PieceColor)
+ int hashCode()
+ boolean equals(Object)
- IPiece getPiece(String,PieceColor)
- boolean isCapture(String)
- Field getField(String,String)
- IPiece getPromotion(String)
- boolean isCheck(String)
- boolean isMate(String)
}


class Game {
- Scanner scanner
- IBoard board
- LogHandler logger
- List<Move> moveList
- PieceColor winner
~ int currentPlayer
~ IPlayer[] players
+ <<Create>> Game(String,Scanner,LogHandler)
~ void initializePlayer(String)
+ boolean play()
+ PieceColor getWinner()
+ void handleDrawing(Visualisation,CheckHandler)
+ void handleMove()
~ boolean testMove(Move)
~ Visualisation createVisualisation()
}


enum BoardColor {
+  BLACK
+  WHITE
+  RED
}

class FieldSet {
- HashSet<Field> set
+ boolean add(Field)
+ void addAll(FieldSet)
+ HashSet<Field> getSet()
+ Field getSingleItem()
+ int size()
+ boolean isEmpty()
+ Field findRow(int)
+ Field findColumn(int)
+ boolean contains(Field)
+ FieldSet difference(FieldSet)
+ FieldSet intersection(FieldSet)
+ FieldSet filterReachableByRow(Field,IBoard)
+ FieldSet filterReachableByDiagonal(Field,IBoard)
+ FieldSet filterReachableByColumn(Field,IBoard)
+ FieldSet getOccupiedByColor(IBoard,PieceColor)
}

class BoardHelper {
- IBoard board
+ <<Create>> BoardHelper(IBoard)
+ Map<Field,IPiece> getAllPiecesFromColor(PieceColor)
+ FieldSet getAttacker(Field,PieceColor)
}

App --> Game : starts
App --> LogHandler : creates
IPlayer <|.. Player
IBoard <|.. Board
IBoard --* IPiece : contains
IPiece --* IBoard : contains
IBoard --* Move : makes
IPlayer --> Move : reads
CheckHandler --* IBoard : contains
FieldSet "1" o-- "*" Field : contains
IBoard "1" <--> "*" Field : uses
Move "1" *-- "2" Field : contains
IPiece "*" --> "*" Field : uses
FieldSet -- IBoard : uses
IPiece --> FieldSet : creates/uses



Game "1"--*"1" Board : contains
Game "1"--*"2" IPlayer : contains
Game --* Visualisation : uses to draw
Game --* CheckHandler

CheckHandler --* BoardHelper : contains

Visualisation --> BoardColor
Visualisation --> PieceColor
Visualisation --> Color

@enduml